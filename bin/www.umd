(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('commander'), require('chalk'), require('inquirer'), require('figlet')) :
  typeof define === 'function' && define.amd ? define(['commander', 'chalk', 'inquirer', 'figlet'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.commander, global.chalk, global.inquirer, global.figlet));
})(this, (function (commander, chalk, inquirer, figlet) { 'use strict';

  // 库名称
  const LIBRARY_NAME = 'rollup-library-ts';
  // issue 地址
  const ISSUE_ADDRESS = 'https://github.com/SaidBaseTemplate/rollup-library-ts/issues';

  class Commands {
      constructor() {
          this.main = LIBRARY_NAME;
      }
      /**
       * 对外暴露，获取命令集
       */
      resolve() {
          return {
              hello: {
                  alias: '',
                  description: 'Ask you how are you.',
                  examples: [this.main + 'hello']
              }
          };
      }
  }

  var name = "rollup-library-ts";
  var version = "1.2.0";
  var description = "rollup library ts template";
  var main$1 = "bin/www.js";
  var type = "module";
  var scripts = {
  	dev: "rimraf bin && rollup -c rollup.config.js -w",
  	build: "rimraf bin && rollup -c rollup.config.js",
  	"test:link": "npm unlink -g rollup-library-ts && npm link",
  	format: "prettier --write .",
  	release: "standard-version",
  	"release:major": "standard-version --release-as major",
  	"release:minor": "standard-version --release-as minor",
  	prepare: "husky install"
  };
  var bin = {
  	"rollup-library-ts": "./bin/www.js"
  };
  var keywords = [
  	"rollup",
  	"ts",
  	"library",
  	"template",
  	"base"
  ];
  var repository = {
  	type: "git",
  	url: "https://github.com/SaidBaseTemplate/rollup-library-ts.git"
  };
  var author = "guizimo";
  var license = "MIT";
  var devDependencies = {
  	"@babel/core": "^7.24.7",
  	"@babel/plugin-proposal-class-properties": "^7.18.6",
  	"@babel/preset-env": "^7.24.7",
  	"@commitlint/cli": "^19.3.0",
  	"@commitlint/config-conventional": "^19.2.2",
  	"@rollup/plugin-alias": "^5.1.0",
  	"@rollup/plugin-babel": "^6.0.4",
  	"@rollup/plugin-commonjs": "^26.0.1",
  	"@rollup/plugin-json": "^6.1.0",
  	"@types/figlet": "^1.5.8",
  	"@types/inquirer": "^9.0.7",
  	commitizen: "^4.3.0",
  	"cz-conventional-changelog": "^3.3.0",
  	husky: "^9.0.11",
  	"lint-staged": "^15.2.7",
  	prettier: "^3.3.2",
  	rimraf: "^5.0.7",
  	rollup: "^4.18.0",
  	"rollup-plugin-typescript2": "^0.36.0",
  	"standard-version": "^9.5.0",
  	tslib: "^2.6.3",
  	typescript: "^5.4.5"
  };
  var dependencies = {
  	chalk: "^5.3.0",
  	commander: "^12.1.0",
  	figlet: "^1.7.0",
  	inquirer: "^9.2.23"
  };
  var config = {
  	commitizen: {
  		path: "./node_modules/cz-conventional-changelog"
  	}
  };
  var myPkg = {
  	name: name,
  	version: version,
  	description: description,
  	main: main$1,
  	type: type,
  	scripts: scripts,
  	bin: bin,
  	keywords: keywords,
  	repository: repository,
  	author: author,
  	license: license,
  	devDependencies: devDependencies,
  	dependencies: dependencies,
  	"lint-staged": {
  	"**/*.{js,ts,json}": "prettier --write ."
  },
  	config: config
  };

  /**
   * 打印
   * @param type 类型
   * @param msg 信息
   * @param bold 是否加粗
   */
  const chalkLog = (type, msg, bold) => {
      let color = 'yellow';
      if (type === 'success')
          color = 'green';
      else if (type === 'info')
          color = 'blue';
      else if (type === 'error')
          color = 'red';
      // @ts-ignore
      const handler = bold ? chalk.bold[color](msg) : chalk[color](msg);
      return console.log(handler);
  };
  /**
   * 日志类
   */
  class Logger {
      // 成功
      success(msg, bold = false) {
          return chalkLog('success', msg, bold);
      }
      // 输出
      info(msg, bold = false) {
          return chalkLog('info', msg, bold);
      }
      // 警告
      warn(msg, bold = false) {
          return chalkLog('warn', msg, bold);
      }
      // 错误
      error(msg, bold = false) {
          return chalkLog('error', msg, bold);
      }
  }

  // 初始化日志服务
  const logger$1 = new Logger();
  // 欢迎信息
  const welcomeMessage = () => {
      logger$1.info('');
      logger$1.info(figlet.textSync(LIBRARY_NAME, {}), true);
      logger$1.info(`Welcome to ${LIBRARY_NAME}!`);
      logger$1.info('');
  };
  // 结束信息
  const endMessage = () => {
      logger$1.info('');
      logger$1.info(`Thank you for your use ${LIBRARY_NAME}!`, true);
  };
  // 结束信息
  const errorMessage = () => {
      logger$1.info('');
      logger$1.info(`If the above does not solve your problem, please check here: ${ISSUE_ADDRESS}!`, true);
  };

  // 初始化日志服务
  const logger = new Logger();
  const helloExec = async () => {
      try {
          welcomeMessage();
          await hello();
          endMessage();
      }
      catch (e) {
          logger.error(e.message);
          errorMessage();
          process.exit(0);
      }
  };
  const hello = async () => {
      const answer = await inquirer.prompt([
          {
              message: 'Hello, how are you?',
              type: 'confirm',
              name: 'isOver',
              default: 'false'
          }
      ]);
      if (answer.isOver) {
          logger.success('Goodbye!');
      }
      else {
          return;
      }
  };

  var execs = {
      hello: helloExec
  };

  function main() {
      // 初始化日志
      const logger = new Logger();
      // 初始化命令行参数
      commander.program.name(LIBRARY_NAME).description('A rollup library ts template.');
      // 配置版本信息
      commander.program.version(LIBRARY_NAME + '@' + myPkg.version).usage('<command> [option]');
      // 初始化命令行参数
      const commands = new Commands();
      // 获取命令列表
      const commandResolves = commands.resolve();
      for (let key in commandResolves) {
          const { alias, description } = commandResolves[key];
          commander.program
              .command(key) // 注册命令
              .alias(alias) // 配置命令别名
              .description(description) // 配置命令描述
              .action(function (name, { args }) {
              try {
                  // 未注册的命令
                  if (key === '*')
                      return logger.error(description);
                  // 执行命令
                  // @ts-ignore
                  return execs[key](args);
              }
              catch (e) {
                  logger.error('Unrecognized commands "' + key + '".');
              }
          });
      }
      // 解析命令行参数
      // @ts-ignore
      commander.program.parse(commander.program.argv);
  }
  // 执行主函数
  main();

}));
